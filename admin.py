from telegram import Update  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
from telegram.ext import ContextTypes  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
from utils import send_message  # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from menu_tree import MENU_TREE
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from constants import ADMIN_ID
import logging  # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

logger = logging.getLogger(__name__)


async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user_choice: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    logger.info(f"Admin selected: {user_choice}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –æ–ø—Ü–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if user_choice in MENU_TREE['admin_menu']['next_state']:
        next_state = MENU_TREE['admin_menu']['next_state'][user_choice]
        context.user_data['state'] = next_state

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ
        if next_state == 'moderation_menu':
            await context.bot.send_message(chat_id=ADMIN_ID,
                                           text="–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤–∞–º–∏.")
            await send_message(update, context, MENU_TREE[next_state]['message'], MENU_TREE[next_state]['options'])
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await send_message(update, context, MENU_TREE[next_state]['message'], MENU_TREE[next_state]['options'])

    else:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
        await send_message(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–ø—Ü–∏—é –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                           MENU_TREE['admin_menu']['options'])


async def moderation_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user_state: str) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    pending_reviews = [review for review in context.application.bot_data.get('reviews', [])
                       if not review.get('approved', False) and not review.get('deleted', False)]

    if not pending_reviews:
        await send_message(update, context, "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", MENU_TREE['admin_menu']['options'])
        context.user_data['state'] = 'admin_menu'
        return

    for review in pending_reviews:
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π message_id
            await context.bot.forward_message(
                chat_id=ADMIN_ID,
                from_chat_id=review['user_id'],
                message_id=review['message_id']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º `message_id` –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            )

            buttons = [
                [InlineKeyboardButton(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å‚úÖ", callback_data=f'publish_{review["message_id"]}'),
                 InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—åüóëÔ∏è", callback_data=f'delete_{review["message_id"]}')]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await context.bot.send_message(chat_id=ADMIN_ID, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    context.user_data['state'] = 'moderation_menu'


