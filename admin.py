from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes
from constants import ADMIN_ID
from menu_tree import MENU_TREE
from utils import send_message
import logging

logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_chat_id = update.message.chat_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_chat_id == ADMIN_ID:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await send_message(update, context, MENU_TREE['admin_menu']['message'], MENU_TREE['admin_menu']['options'])
        context.user_data['state'] = 'admin_menu'
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])
        context.user_data['state'] = 'main_menu'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
async def moderate_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–æ–¥–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–∑—ã–≤—ã."""
    pending_reviews = [review for review in context.application.bot_data.get('reviews', [])
                       if not review.get('approved', False) and not review.get('deleted', False)]

    if not pending_reviews:
        await send_message(update, context, "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", [["–ù–∞–∑–∞–¥"]])
        context.user_data['state'] = 'moderation_menu'
        return

    for review in pending_reviews:
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
            await context.bot.forward_message(
                chat_id=ADMIN_ID,
                from_chat_id=review['user_id'],
                message_id=review['message_id']
            )

            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Ö –∞–¥–º–∏–Ω—É
            if review.get('media_file_ids'):
                if len(review['media_file_ids']) > 1:
                    media_group = [InputMediaPhoto(file_id) for file_id in review['media_file_ids']]
                    await context.bot.send_media_group(chat_id=ADMIN_ID, media=media_group)
                else:
                    await context.bot.send_photo(chat_id=ADMIN_ID, photo=review['media_file_ids'][0])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–æ–¥–æ–±—Ä–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å)
            buttons = [
                [InlineKeyboardButton(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å‚úÖ", callback_data=f'publish_{review["message_id"]}'),
                 InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—åüóëÔ∏è", callback_data=f'delete_{review["message_id"]}')],
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await context.bot.send_message(chat_id=ADMIN_ID, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    await send_message(update, context, "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏—é:", [["–ù–∞–∑–∞–¥"]])
    context.user_data['state'] = 'moderation_menu'

async def exit_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
    await send_message(update, context, "–í—Å–µ –æ—Ç–∑—ã–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.", [["–ê–¥–º–∏–Ω –º–µ–Ω—éüîô"]])
    context.user_data['state'] = 'admin_menu'


async def save_review_to_bot_data(context, user_id, user_name, message_id, review_text, media_file_ids=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –≤ –±–æ—Ç-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""

    review_data = {
        'user_id': user_id,
        'user_name': user_name,
        'message_id': message_id,
        'review': review_text,
        'media_file_ids': media_file_ids if media_file_ids else [],  # –°–ø–∏—Å–æ–∫ ID –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        'approved': False,  # –û—Ç–∑—ã–≤ –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω
        'deleted': False  # –û—Ç–∑—ã–≤ –µ—â–µ –Ω–µ —É–¥–∞–ª–µ–Ω
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –≤ context.application.bot_data
    if 'reviews' not in context.application.bot_data:
        context.application.bot_data['reviews'] = []

    context.application.bot_data['reviews'].append(review_data)
    logger.info(f"–û—Ç–∑—ã–≤ –æ—Ç {user_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –≤ context.application.bot_data
    if 'reviews' not in context.application.bot_data:
        context.application.bot_data['reviews'] = []

    context.application.bot_data['reviews'].append(review_data)
    logger.info(f"–û—Ç–∑—ã–≤ –æ—Ç {user_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")

