from telegram import Update, InlineKeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes
from config import ADMIN_ID, CHANNEL_ID, logger
from data import CLEANING_PRICES, CLEANING_DETAILS
from database import execute_query
from menu import MENU_TREE
from utils import send_message, send_inline_message, calculate_windows
from analytics import get_summary_by_period
from analytics import track_event, check_user_in_database


async def analytics_menu(update, context):
    summary = await get_summary_by_period('1 day')
    report = "\n".join([f"{state}: {count}" for state, count in summary])
    await update.message.reply_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:\n{report}")


async def check_user_in_database(user_id):
    query = "SELECT EXISTS(SELECT 1 FROM user_analytics WHERE user_id = ?);"
    result = await execute_query(query, (user_id,))
    return result[0][0] == 1

# –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.message.from_user
    user_id = user.id
    username = user.username or "Anonymous"
    user_state = context.user_data.get('state', 'main_menu')
    user_choice = update.message.text.strip() if update.message and update.message.text else None

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logger.info("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s", user_state)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    await track_event(
        user_id=user_id,
        username=username,
        state=user_state,
        is_new=False  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ "start"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüì¢"
    if user_choice == '–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüì¢':
        context.user_data['state'] = 'useful_info'
        await show_useful_info(update, context)
        return

    if user_state == 'write_review':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        review_text = update.message.caption or update.message.text or ""
        message_id = update.message.message_id
        user_name = update.message.from_user.full_name

        if review_text == MENU_TREE['write_review']['options'][0]:
            await send_message(update, context, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", MENU_TREE['main_menu']['options'])
            context.user_data['state'] = 'main_menu'
            return
        elif review_text == '':
            review_data = {
                'review': review_text,
                'user_name': user_name,
                'user_id': user_id,
                'message_id': message_id,
                'approved': False
            }

            context.application.bot_data.setdefault('reviews', []).append(review_data)
            context.user_data['state'] = 'write_review'
            return
        else:
            review_data = {
                'review': review_text,
                'user_name': user_name,
                'user_id': user_id,
                'message_id': message_id,
                'approved': False
            }

            context.application.bot_data.setdefault('reviews', []).append(review_data)
            await send_message(update, context, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
                               MENU_TREE['write_review']['options'])
            context.user_data['state'] = 'write_review'
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç–∑—ã–≤—ãüí¨"
    if user_state == 'reviews_menu' and user_choice == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç–∑—ã–≤—ãüí¨':
        channel_url = "https://t.me/CleaningSphere"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        await update.message.reply_text(f"–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: {channel_url}")
        context.user_data['state'] = 'main_menu'
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–∞—Ä–∏—Ñ–æ–≤
    if user_state.startswith('detail_') and user_choice == '–ù–∞–∑–∞–¥':
        context.user_data['state'] = 'show_tariffs'
        await send_message(update, context, MENU_TREE['show_tariffs']['message'], MENU_TREE['show_tariffs']['options'])
        return

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id == ADMIN_ID:
        if user_state == 'main_menu':
            context.user_data['state'] = 'admin_menu'
            menu = MENU_TREE['admin_menu']
            await send_message(update, context, menu['message'], menu['options'])
            return

        if user_state == 'admin_menu' and user_choice == '–ú–æ–¥–µ—Ä–∞—Ü–∏—è':
            reviews = context.application.bot_data.get('reviews', [])
            pending_reviews = [review for review in reviews if not review.get('approved', False)]

            if not pending_reviews:
                await send_message(update, context, "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
                                   MENU_TREE['admin_menu']['options'])
                context.user_data['state'] = 'admin_menu'
                return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–∞
    if user_state.startswith('detail_') and user_choice == '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ':
        tariff_name = user_state.split('_')[1]
        context.user_data['selected_tariff'] = tariff_name

        if tariff_name == '–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥':
            context.user_data['state'] = 'enter_window_panels'
            await send_message(update, context, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫:", ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô'])
        else:
            context.user_data['price_per_sqm'] = CLEANING_PRICES[tariff_name]
            context.user_data['state'] = 'enter_square_meters'
            await send_message(update, context, MENU_TREE['enter_square_meters']['message'],
                               MENU_TREE['enter_square_meters']['options'])
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    menu = MENU_TREE.get(user_state)
    if user_choice in menu['next_state']:
        next_state = menu['next_state'][user_choice]
        context.user_data['state'] = next_state

        next_menu = MENU_TREE.get(next_state)
        if next_menu:
            await send_message(update, context, next_menu['message'], next_menu['options'])
    else:
        await send_message(update, context, menu.get('fallback', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.'),
                           menu['options'])



async def moderate_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE, user_state: str) -> None:
    pending_reviews = [review for review in context.application.bot_data.get('reviews', [])
                       if not review.get('approved', False) and not review.get('deleted', False)]

    if not pending_reviews:
        await send_message(update, context, "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", MENU_TREE['admin_menu']['options'])
        context.user_data['state'] = 'admin_menu'
        return

    for review in pending_reviews:
        try:
            await context.bot.forward_message(
                chat_id=ADMIN_ID,
                from_chat_id=review['user_id'],
                message_id=review['message_id']
            )

            buttons = [
                [InlineKeyboardButton(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å‚úÖ", callback_data=f'publish_{review["message_id"]}'),
                 InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—åüóëÔ∏è", callback_data=f'delete_{review["message_id"]}')]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await context.bot.send_message(chat_id=ADMIN_ID, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    context.user_data['state'] = 'moderation_menu'



async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = query.from_user
    user_id = user.id
    username = user.username or "Anonymous"
    user_state = context.user_data.get('state', 'main_menu')

    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π
    if query.data == "show_phone_number":
        await query.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +79956124581")
        return

    if user_state == 'moderation_menu':
        action, message_id = query.data.split('_')
        pending_reviews = context.application.bot_data.get('reviews', [])
        review = next((r for r in pending_reviews if str(r['message_id']) == message_id), None)

        if review:
            if action == 'delete':
                review['deleted'] = True
                await query.edit_message_text(text="–û—Ç–∑—ã–≤ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω.")
                context.application.bot_data['reviews'].remove(review)

            elif action == 'publish':
                review['approved'] = True
                await publish_review(context, review)
                await query.edit_message_text(text="–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
                for r in context.application.bot_data['reviews']:
                    if r['user_id'] == review['user_id'] and r['message_id'] == review['message_id']:
                        r['approved'] = True

                # –¢—Ä–µ–∫–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
                await track_event(
                    user_id=review['user_id'],  # ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ—Ç–∑—ã–≤–∞
                    username=review['user_name'],  # –Æ–∑–µ—Ä–Ω–µ–π–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    state='review_published',  # –°–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –æ—Ç–∑—ã–≤–∞
                    is_new=False  # –û—Ç–∑—ã–≤ —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
                )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
        remaining_reviews = [r for r in pending_reviews if not r.get('approved', False) and not r.get('deleted', False)]
        if not remaining_reviews:
            await context.bot.send_message(chat_id=query.message.chat_id, text="–í—Å–µ –æ—Ç–∑—ã–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
            context.user_data.pop('pending_reviews', None)
            context.user_data['state'] = 'admin_menu'
            return

        context.user_data['state'] = 'moderation_menu'




async def show_useful_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª
    channel_url = "https://t.me/+7YI7c3pWXhQwMTcy"

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª
    inline_buttons = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_url)]]
    inline_reply_markup = InlineKeyboardMarkup(inline_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    main_menu_keyboard = [["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
    await update.message.reply_text(
        "–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, –∞–∫—Ü–∏–π –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!",
        reply_markup=inline_reply_markup
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    user_id = user.id
    username = user.username or "Anonymous"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º
    is_new = not await check_user_in_database(user_id)

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ "start"
    await track_event(
        user_id=user_id,
        username=username,
        state="start_command",
        is_new=is_new
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–Ω—é –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id == ADMIN_ID:
        context.user_data["state"] = "admin_menu"
        menu = MENU_TREE["admin_menu"]
    else:
        context.user_data["state"] = "main_menu"
        menu = MENU_TREE["main_menu"]

    await send_message(update, context, menu["message"], menu["options"])


async def publish_review(context: ContextTypes.DEFAULT_TYPE, review: dict) -> None:
    try:
        if review['photo_file_ids']:
            if len(review['photo_file_ids']) > 1:
                media_group = [InputMediaPhoto(photo_id) for photo_id in review['photo_file_ids']]
                await context.bot.send_media_group(chat_id=CHANNEL_ID, media=media_group)
            else:
                await context.bot.send_photo(chat_id=CHANNEL_ID, photo=review['photo_file_ids'][0])

        await context.bot.forward_message(
            chat_id=CHANNEL_ID,
            from_chat_id=review['user_id'],
            message_id=review['message_id']
        )

        review['approved'] = True
        logger.info(f"–û—Ç–∑—ã–≤ –æ—Ç {review['user_name']} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await context.bot.send_message(chat_id=ADMIN_ID,
                                       text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤ –æ—Ç {review['user_name']}. –û—à–∏–±–∫–∞: {e}")
