from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, \
    InlineKeyboardMarkup  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∫–Ω–æ–ø–æ–∫
from telegram.ext import ContextTypes
from utils import send_tariff_details  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ utils.py
from menu_tree import MENU_TREE
from constants import CLEANING_PRICES, CLEANING_DETAILS
from utils import send_message, send_inline_message
import logging

logger = logging.getLogger(__name__)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ"
for tariff_name, details in CLEANING_DETAILS.items():
    MENU_TREE[f'detail_{tariff_name}'] = {
        'message': details['details_text'],
        'image_path': details['image_path'],
        'options': ['–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ', '–ù–∞–∑–∞–¥'],
        'next_state': {
            '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ': 'calculator_menu',
            '–ù–∞–∑–∞–¥': 'show_tariffs'
        }
    }


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_state = context.user_data.get('state', 'main_menu')  # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ 'main_menu' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    user_choice = update.message.text.strip()  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"User {user_id} in state {user_state} selected: {user_choice}")

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if user_state == 'main_menu':
        if user_choice == '–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüì¢':
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            context.user_data['state'] = 'useful_info'
            await show_useful_info(update, context)
            return

        elif user_choice == '–¢–∞—Ä–∏—Ñ—ãüè∑Ô∏è':
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ü–æ–∫–∞–∑ —Ç–∞—Ä–∏—Ñ–æ–≤"
            context.user_data['state'] = 'show_tariffs'
            await send_message(update, context, MENU_TREE['show_tariffs']['message'], MENU_TREE['show_tariffs']['options'])
            return

        elif user_choice == '–û—Ç–∑—ã–≤—ãüí¨':
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–û—Ç–∑—ã–≤—ã"
            context.user_data['state'] = 'reviews_menu'
            await send_message(update, context, MENU_TREE['reviews_menu']['message'], MENU_TREE['reviews_menu']['options'])
            return

        elif user_choice == '–°–≤—è–∑–∞—Ç—å—Å—èüìû':
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
            context.user_data['state'] = 'contact_menu'
            await send_message(update, context, MENU_TREE['contact_menu']['message'], MENU_TREE['contact_menu']['options'])
            return

        else:
            # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –æ—Å—Ç–∞—ë–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
            await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.", MENU_TREE['main_menu']['options'])
            return

    # –ú–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤
    elif user_state == 'show_tariffs':
        if user_choice in CLEANING_DETAILS:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞—Ä–∏—Ñ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
            await send_tariff_details(update, context, user_choice)
            return

        elif user_choice == '–ù–∞–∑–∞–¥üîô':
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            context.user_data['state'] = 'main_menu'
            await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])
            return

    # –ú–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤
    elif user_state == 'reviews_menu':
        if user_choice == '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤üìù':
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
            context.user_data['state'] = 'write_review'
            await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:", [['–ù–∞–∑–∞–¥üîô']])
            return

        elif user_choice == '–ù–∞–∑–∞–¥üîô':
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            context.user_data['state'] = 'main_menu'
            await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])
            return

    # –ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    elif user_state == 'write_review':
        review_text = update.message.text  # –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
        if review_text:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            review_data = {'review': review_text, 'user_id': user_id, 'approved': False}
            context.application.bot_data.setdefault('reviews', []).append(review_data)
            await send_message(update, context, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", MENU_TREE['main_menu']['options'])
            context.user_data['state'] = 'main_menu'
            return

    # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —É—Å–ª—É–≥
    elif user_state == 'calculator_menu':
        if user_choice in CLEANING_PRICES:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤
            context.user_data['selected_tariff'] = user_choice
            context.user_data['state'] = 'enter_square_meters'
            await send_message(update, context, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤:", [['–ù–∞–∑–∞–¥üîô']])
            return

    # –í–≤–æ–¥ –º–µ—Ç—Ä–∞–∂–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞
    elif user_state == 'enter_square_meters':
        await handle_square_meters_input(update, context)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –º–µ—Ç—Ä–∞–∂–∞
        return

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_state}. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        context.user_data['state'] = 'main_menu'
        await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.", MENU_TREE['main_menu']['options'])



async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state = context.user_data.get('state', 'main_menu')

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    logger.info(f"User {query.from_user.id} in state {user_state} clicked button with data: {query.data}")

    # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if query.data == "show_phone_number":
        await query.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +79956124581")
        return

    # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
    if user_state == 'moderation_menu':
        # –î–∞–Ω–Ω—ã–µ callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'action_message_id', –Ω–∞–ø—Ä–∏–º–µ—Ä: 'publish_12345' –∏–ª–∏ 'delete_12345'
        action, message_id = query.data.split('_')

        pending_reviews = context.application.bot_data.get('reviews', [])
        review = next((r for r in pending_reviews if str(r['message_id']) == message_id), None)

        if review:
            if action == 'delete':
                # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
                review['deleted'] = True
                await query.edit_message_text(text="–û—Ç–∑—ã–≤ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
                context.application.bot_data['reviews'].remove(review)
                logger.info(f"Review {message_id} deleted by admin {query.from_user.id}.")
            elif action == 'publish':
                # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∑—ã–≤–∞
                review['approved'] = True
                await publish_review(context, review)  # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
                await query.edit_message_text(text="–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
                logger.info(f"Review {message_id} published by admin {query.from_user.id}.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        remaining_reviews = [r for r in pending_reviews if not r.get('approved', False) and not r.get('deleted', False)]
        if not remaining_reviews:
            await context.bot.send_message(chat_id=query.message.chat_id, text="–í—Å–µ –æ—Ç–∑—ã–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
            context.user_data['state'] = 'admin_menu'
            return

        return

    # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–°–≤—è–∑–∞—Ç—å—Å—è"
    if user_state == 'contact':
        if query.data == "show_phone_number":
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await query.message.reply_text("–ù–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: +79956124581")
            return

    # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ–ø—Ü–∏—é.")


async def show_useful_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à Telegram-–∫–∞–Ω–∞–ª –∏–ª–∏ –¥—Ä—É–≥—É—é –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    channel_url = "https://t.me/your_channel"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É

    # –°–æ–∑–¥–∞–µ–º Inline-–∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
    buttons = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª", url=channel_url)]]
    reply_markup = InlineKeyboardMarkup(buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await update.message.reply_text(
        "–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, –∞–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!",
        reply_markup=reply_markup
    )

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.id}")


async def handle_square_meters_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_choice = update.message.text.strip()
    try:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
        sqm = float(user_choice)
        logger.info(f"–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤: {sqm}")

        price_per_sqm = context.user_data.get('price_per_sqm')
        if price_per_sqm is None:
            await send_message(update, context,
                               '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.',
                               ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô'])
            context.user_data['state'] = 'main_menu'
            return

        # –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        total_cost = price_per_sqm * sqm
        total_cost = max(total_cost, 1500)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å 1500 —Ä—É–±.

        result_message = (
            f'–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π —É–±–æ—Ä–∫–∏: {total_cost:.2f} —Ä—É–±. –∑–∞ {sqm:.2f} –∫–≤.–º.'
        )
        await send_message(update, context, result_message, MENU_TREE['calculate_result']['options'])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–æ—â–∞–¥—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['square_meters'] = sqm
        context.user_data['total_cost'] = total_cost

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø—É—Å–ª—É–≥–∏
        selected_tariff = context.user_data.get('selected_tariff')
        if selected_tariff in ['–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº', '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ']:
            await prompt_for_extras(update, context)
        else:
            await complete_calculation(update, context)

        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤: {user_choice}")
        await send_message(update, context, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤.',
                           MENU_TREE['enter_square_meters']['options'])


async def prompt_for_extras(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
    extras_options = [
        ['–ì–ª–∞–∂–∫–∞ –±–µ–ª—å—è', '–°—Ç–∏—Ä–∫–∞ –±–µ–ª—å—è'],
        ['–ü–æ—á–∏—Å—Ç–∏—Ç—å –ª–æ—Ç–æ–∫', '–£—Ö–æ–¥ –∑–∞ —Ü–≤–µ—Ç–∞–º–∏'],
        ['–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥(1 —Å—Ç–≤–æ—Ä–∫–∞)'],
        ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô', '–°–≤—è–∑–∞—Ç—å—Å—èüìû']
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏
    reply_markup = ReplyKeyboardMarkup(
        extras_options, resize_keyboard=True, one_time_keyboard=True
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏?",
        reply_markup=reply_markup
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –±–æ—Ç –∑–Ω–∞–ª, —á—Ç–æ –æ–Ω –≤—ã–±–∏—Ä–∞–µ—Ç –¥–æ–ø. —É—Å–ª—É–≥–∏
    context.user_data['state'] = 'add_extras'

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.message.from_user.id} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏.")


async def moderate_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE, user_state: str) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    pending_reviews = context.application.bot_data.get('reviews', [])
    # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –æ—Ç–∑—ã–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏ –Ω–µ —É–¥–∞–ª–µ–Ω—ã
    pending_reviews = [review for review in pending_reviews if
                       not review.get('approved', False) and not review.get('deleted', False)]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∑—ã–≤—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if not pending_reviews:
        await update.message.reply_text("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        context.user_data['state'] = 'admin_menu'
        return

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –æ—Ç–∑—ã–≤—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è (–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å)
    for review in pending_reviews:
        user_name = review.get('user_name', '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        review_text = review.get('review', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–∑—ã–≤–∞
        review_message = f"–û—Ç–∑—ã–≤ –æ—Ç {user_name}:\n\n{review_text}"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤
        buttons = [
            [InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_{review['message_id']}")],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{review['message_id']}")]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        await update.message.reply_text(review_message, reply_markup=reply_markup)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "moderation_menu", —á—Ç–æ–±—ã –±–æ—Ç –∑–Ω–∞–ª, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    context.user_data['state'] = 'moderation_menu'

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {update.message.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")


async def publish_review(context: ContextTypes.DEFAULT_TYPE, review: dict) -> None:
    # ID –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –æ—Ç–∑—ã–≤—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞)
    review_channel_id = "@your_review_channel"

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–∑—ã–≤–∞
    user_name = review.get('user_name', '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    review_text = review.get('review', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    review_message = f"<b>–û—Ç–∑—ã–≤ –æ—Ç {user_name}:</b>\n\n{review_text}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ (–≤–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML —Ä–∞–∑–º–µ—Ç–∫–∏)
    await context.bot.send_message(
        chat_id=review_channel_id,
        text=review_message,
        parse_mode='HTML'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    )

    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
    logger.info(f"–û—Ç–∑—ã–≤ –æ—Ç {user_name} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {review_channel_id}.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ –∫–∞–∫ "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π"
    review['approved'] = True


def calculate_windows(price_per_panel: float, num_panels: int) -> dict:
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    total_cost = price_per_panel * num_panels

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 —Ä—É–±.)
    minimum_cost = 1000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏
    if total_cost < minimum_cost:
        total_cost = minimum_cost

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    formatted_message = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–π–∫—É {num_panels} –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫.\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –æ–¥–Ω—É —Å—Ç–≤–æ—Ä–∫—É: {price_per_panel:.2f} —Ä—É–±.\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–π–∫–∏: {total_cost:.2f} —Ä—É–±."
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
    return {
        'total_cost': total_cost,
        'formatted_message': formatted_message
    }


async def complete_calculation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_cost = context.user_data.get('total_cost', 0)
    selected_extras = context.user_data.get('selected_extras', [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    final_message = f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥: {total_cost:.2f} —Ä—É–±."

    if selected_extras:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        extras_list = ", ".join(selected_extras)
        final_message += f"\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: {extras_list}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    await update.message.reply_text(final_message)

    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    buttons = [
        [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—èüìû", url="https://t.me/your_contact")],
        [InlineKeyboardButton("WhatsApp", url="https://wa.me/your_number")],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="show_phone_number")]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–≤—è–∑–∏
    await send_inline_message(update, context, "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ WhatsApp:",
                              buttons)

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
    logger.info(
        f"–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id} —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é: {total_cost:.2f} —Ä—É–±.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    context.user_data['state'] = 'main_menu'
