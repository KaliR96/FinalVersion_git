from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from menu_tree import MENU_TREE
from constants import CLEANING_PRICES, CLEANING_DETAILS
from utils import send_message
from constants import CHANNEL_LINK
import logging

logger = logging.getLogger(__name__)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ"
for tariff_name, details in CLEANING_DETAILS.items():
    MENU_TREE[f'detail_{tariff_name}'] = {
        'message': details['details_text'],
        'image_path': details['image_path'],
        'options': ['–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ', '–ù–∞–∑–∞–¥'],
        'next_state': {
            '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ': 'calculator_menu',
            '–ù–∞–∑–∞–¥': 'show_tariffs'
        }
    }


import logging

logger = logging.getLogger(__name__)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    user_state = context.user_data.get('state', 'main_menu')

    logger.info(f"User state: {user_state}, User message: {user_message}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—ã–∑–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    if user_state == 'main_menu' and user_message == '–¢–∞—Ä–∏—Ñ—ãüè∑Ô∏è':
        context.user_data['state'] = 'show_tariffs'
        await send_message(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", MENU_TREE['show_tariffs']['options'])
    elif user_state == 'show_tariffs':
        await handle_show_tariffs(update, context, user_message)
    elif user_state.startswith('detail_') and user_message == '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ':
        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ"
        context.user_data['state'] = 'calculator_menu'
        await send_message(update, context, MENU_TREE['calculator_menu']['message'], MENU_TREE['calculator_menu']['options'])
    elif user_state == 'calculator_menu':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        if user_message in CLEANING_PRICES:
            context.user_data['selected_tariff'] = user_message
            context.user_data['state'] = 'enter_square_meters'
            await send_message(update, context, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤ –¥–ª—è —É–±–æ—Ä–∫–∏:", MENU_TREE['enter_square_meters']['options'])
        else:
            await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞:", MENU_TREE['calculator_menu']['options'])
    elif user_state == 'enter_square_meters':
        await handle_enter_square_meters(update, context, user_message)
    elif user_state == 'enter_window_panels':
        await handle_enter_window_panels(update, context, user_message)
    elif user_state == 'add_extras':
        await handle_add_extras(update, context, user_message)
    else:
        logger.warning(f"Unknown state: {user_state}, redirecting to handle_unknown_message.")
        await handle_unknown_message(update, context)


async def handle_show_tariffs(update: Update, context: ContextTypes.DEFAULT_TYPE, user_choice: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    user_choice = user_choice.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤
    if user_choice in CLEANING_PRICES:
        details = CLEANING_DETAILS.get(user_choice)
        if details:
            try:
                with open(details['image_path'], 'rb') as image_file:
                    await update.message.reply_photo(photo=image_file)
            except FileNotFoundError:
                logger.error(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {details['image_path']}")
                await update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['selected_tariff'] = user_choice
            context.user_data['state'] = f'detail_{user_choice}'

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞
            for part in details['details_text']:
                await update.message.reply_text(part)

            await send_message(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                               MENU_TREE[f'detail_{user_choice}']['options'])
        else:
            await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.",
                               MENU_TREE['show_tariffs']['options'])
    else:
        await send_message(update, context, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                           MENU_TREE['show_tariffs']['options'])


async def handle_enter_square_meters(update: Update, context: ContextTypes.DEFAULT_TYPE, user_input: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤."""
    try:
        square_meters = float(user_input)
        context.user_data['square_meters'] = square_meters

        selected_tariff = context.user_data.get('selected_tariff', None)

        if selected_tariff in CLEANING_PRICES:
            price_per_meter = CLEANING_PRICES[selected_tariff]
            total_cost = price_per_meter * square_meters
            context.user_data['total_cost'] = total_cost  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            await update.message.reply_text(f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: {total_cost} —Ä—É–±.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤: –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –∏–ª–∏ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è —É–±–æ—Ä–∫–∞
        if selected_tariff in ['–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº', '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ']:
            context.user_data['state'] = 'add_extras'
            await send_message(update, context, MENU_TREE['add_extras']['message'], MENU_TREE['add_extras']['options'])
        else:
            # –ï—Å–ª–∏ —Ç–∞—Ä–∏—Ñ –¥—Ä—É–≥–æ–π, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—á–µ—Ç
            await update.message.reply_text(f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: {total_cost} —Ä—É–±.")
            context.user_data['state'] = 'main_menu'
            await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤.")


async def handle_enter_window_panels(update: Update, context: ContextTypes.DEFAULT_TYPE, user_input: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫."""
    try:
        num_panels = int(user_input)
        context.user_data['window_panels'] = num_panels
        context.user_data['state'] = 'calculate_result'
        await send_message(update, context, MENU_TREE['calculate_result']['message'], MENU_TREE['calculate_result']['options'])
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫.")


async def handle_add_extras(update: Update, context: ContextTypes.DEFAULT_TYPE, user_choice: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥."""
    # –î–æ–ø —É—Å–ª—É–≥–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å
    EXTRA_SERVICES = {
        '–ì–ª–∞–∂–∫–∞ –±–µ–ª—å—è': 600,
        '–°—Ç–∏—Ä–∫–∞ –±–µ–ª—å—è': 300,
        '–ü–æ—á–∏—Å—Ç–∏—Ç—å –ª–æ—Ç–æ–∫': 300,
        '–£—Ö–æ–¥ –∑–∞ —Ü–≤–µ—Ç–∞–º–∏': 200,
        '–ú—ã—Ç—å–µ –æ–∫–æ–Ω(1 —Å—Ç–≤–æ—Ä–∫–∞)üß¥': 350
    }

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É—Å–ª—É–≥—É, –ø—Ä–∏–±–∞–≤–ª—è–µ–º –µ—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if user_choice in EXTRA_SERVICES:
        extra_cost = EXTRA_SERVICES[user_choice]
        total_cost = context.user_data.get('total_cost', 0)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É
        total_cost += extra_cost
        context.user_data['total_cost'] = total_cost  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—É–º–º—É
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {user_choice}. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} —Ä—É–±.")

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–æ–ø —É—Å–ª—É–≥–∏
        await send_message(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–∞—Å—á–µ—Ç:",
                           MENU_TREE['add_extras']['options'])

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–°–≤—è–∑–∞—Ç—å—Å—è" –∏–ª–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", –≤—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
    elif user_choice == '–°–≤—è–∑–∞—Ç—å—Å—èüìû' or user_choice == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô':
        total_cost = context.user_data.get('total_cost', 0)
        await update.message.reply_text(f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: {total_cost} —Ä—É–±.")
        context.user_data['state'] = 'main_menu'  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–ø—Ü–∏—é
    else:
        await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
                           MENU_TREE['add_extras']['options'])


async def handle_unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await send_message(update, context, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é –°–í–Ø–ó–ê–¢–¨–°–Ø")

async def handle_reviews_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user_choice: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –æ—Ç–∑—ã–≤–∞–º–∏."""
    if user_choice in MENU_TREE['reviews_menu']['next_state']:
        next_state = MENU_TREE['reviews_menu']['next_state'][user_choice]
        context.user_data['state'] = next_state
        await send_message(update, context, MENU_TREE[next_state]['message'], MENU_TREE[next_state]['options'])
    else:
        await send_message(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏.", MENU_TREE['reviews_menu']['options'])

async def handle_write_review(update: Update, context: ContextTypes.DEFAULT_TYPE, user_input: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞."""
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    context.user_data['state'] = 'main_menu'
    await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])

async def handle_view_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE, user_choice: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤."""
    if user_choice == '–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É':
        await update.message.reply_text("–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: https://t.me/your_channel")
    elif user_choice == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô':
        context.user_data['state'] = 'main_menu'
        await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])
    else:
        await send_message(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏.", MENU_TREE['view_reviews']['options'])

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE, user_choice: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    if user_choice == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô':
        context.user_data['state'] = 'main_menu'
        await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])
    else:
        await send_message(update, context, "–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –≤—ã –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã.", MENU_TREE['contact']['options'])

async def handle_useful_info(update: Update, context: ContextTypes.DEFAULT_TYPE, user_choice: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∫–∞–Ω–∞–ª."""

    if user_choice == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô':
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        context.user_data['state'] = 'main_menu'
        await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –ø–æ—Å–µ—Ç–∏—Ç—å –∫–∞–Ω–∞–ª –∏ —Å—Å—ã–ª–∫–æ–π
        await send_message(update, context,
                           f"–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, –∞–∫—Ü–∏–π –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!\n\n{CHANNEL_LINK}",
                           MENU_TREE['useful_info']['options'])

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
            query = update.callback_query
            await query.answer()

            user_state = context.user_data.get('state', 'main_menu')

            if user_state in MENU_TREE:
                next_state = MENU_TREE[user_state]['next_state'].get(query.data, user_state)
                context.user_data['state'] = next_state

                menu = MENU_TREE[next_state]
                await send_message(update, context, menu['message'], menu['options'])
            else:
                await send_message(update, context, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

