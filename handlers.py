from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from menu_tree import MENU_TREE
from constants import CLEANING_PRICES, CLEANING_DETAILS, CHANNEL_ID
from utils import send_message
from constants import CHANNEL_LINK, ADMIN_ID
from telegram import InputMediaPhoto

import logging

logger = logging.getLogger(__name__)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ"
for tariff_name, details in CLEANING_DETAILS.items():
    MENU_TREE[f'detail_{tariff_name}'] = {
        'message': details['details_text'],
        'image_path': details['image_path'],
        'options': ['–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ', '–ù–∞–∑–∞–¥'],
        'next_state': {
            '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ': 'calculator_menu',
            '–ù–∞–∑–∞–¥': 'show_tariffs'
        }
    }


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–º
    if update.message:
        # –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_message = update.message.text.strip()
        user_state = context.user_data.get('state', 'main_menu')

        logger.info(f"User state: {user_state}, User message: {user_message}")

        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—èüìû" –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if user_message == '–°–≤—è–∑–∞—Ç—å—Å—èüìû':
            # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            keyboard = [
                [InlineKeyboardButton("WhatsApp", url="https://wa.me/79956124581")],
                [InlineKeyboardButton("Telegram", url="https://t.me/kaliroom")],
                [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="show_phone_number")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–°–≤—è–∑–∞—Ç—å—Å—èüìû —Å–æ –º–Ω–æ–π –≤—ã –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:",
                                            reply_markup=reply_markup)
            context.user_data['state'] = 'contact'
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

        # –ó–∞–º–µ–Ω–∞ Inline-–∫–Ω–æ–ø–æ–∫ –Ω–∞ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å Reply-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è "–û—Ç–∑—ã–≤—ãüí¨"
        elif user_message == '–û—Ç–∑—ã–≤—ãüí¨':
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤ —Å Reply-–∫–Ω–æ–ø–∫–∞–º–∏
            await handle_reviews_menu(update, context)
            return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤"
        elif user_state == 'reviews_menu' and user_message == '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤':
            await handle_write_review(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"
        elif user_state == 'reviews_menu' and user_message == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã':
            await handle_view_reviews(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
        elif user_state == 'writing_review':
            await handle_write_review_content(update, context, user_message)
            return


        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô"
        elif user_message == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô':
            context.user_data['state'] = 'main_menu'
            await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])
            return

        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ"
        elif user_message == '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ':
            context.user_data['state'] = 'calculator_menu'
            await send_message(update, context, MENU_TREE['calculator_menu']['message'],
                               MENU_TREE['calculator_menu']['options'])
            return

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ
        if user_state == 'main_menu' and user_message == '–¢–∞—Ä–∏—Ñ—ãüè∑Ô∏è':
            context.user_data['state'] = 'show_tariffs'
            await send_message(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
                               MENU_TREE['show_tariffs']['options'])
        elif user_state == 'show_tariffs':
            await handle_show_tariffs(update, context, user_message)
        elif user_state.startswith('detail_') and user_message == '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—ÄüßÆ':
            context.user_data['state'] = 'calculator_menu'
            await send_message(update, context, MENU_TREE['calculator_menu']['message'],
                               MENU_TREE['calculator_menu']['options'])
        elif user_state == 'calculator_menu':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            if user_message in CLEANING_PRICES:
                context.user_data['selected_tariff'] = user_message
                context.user_data['state'] = 'enter_square_meters'
                await send_message(update, context, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤ –¥–ª—è —É–±–æ—Ä–∫–∏:",
                                   MENU_TREE['enter_square_meters']['options'])
            else:
                await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                                   MENU_TREE['calculator_menu']['options'])
        elif user_state == 'enter_square_meters':
            await handle_enter_square_meters(update, context, user_message)
        elif user_state == 'enter_window_panels':
            await handle_enter_window_panels(update, context, user_message)
        elif user_state == 'add_extras':
            await handle_add_extras(update, context, user_message)
        else:
            logger.warning(f"Unknown state: {user_state}, redirecting to handle_unknown_message.")
            await handle_unknown_message(update, context)

    elif update.callback_query:
        # –≠—Ç–æ callback-–∑–∞–ø—Ä–æ—Å (–Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏)
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ callback –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä"
        if query.data == 'show_phone_number':
            await query.edit_message_text(text="–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ –Ω–æ–º–µ—Ä—É: +7 (995) 612-45-81")
        elif query.data == 'write_review':
            await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.")
        else:
            # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
            menu = MENU_TREE.get(context.user_data.get('state'), MENU_TREE['main_menu'])
            await query.edit_message_text(text=menu['message'], reply_markup=InlineKeyboardMarkup(menu['options']))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä"
async def show_phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ callback –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ edit_message_text
    await query.edit_message_text(text="–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ –Ω–æ–º–µ—Ä—É: +7 (995) 612-45-81")


async def handle_show_tariffs(update: Update, context: ContextTypes.DEFAULT_TYPE, user_choice: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    user_choice = user_choice.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤
    if user_choice in CLEANING_PRICES:
        details = CLEANING_DETAILS.get(user_choice)
        if details:
            try:
                with open(details['image_path'], 'rb') as image_file:
                    await update.message.reply_photo(photo=image_file)
            except FileNotFoundError:
                logger.error(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {details['image_path']}")
                await update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['selected_tariff'] = user_choice
            context.user_data['state'] = f'detail_{user_choice}'

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞
            for part in details['details_text']:
                await update.message.reply_text(part)

            await send_message(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                               MENU_TREE[f'detail_{user_choice}']['options'])
        else:
            await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.",
                               MENU_TREE['show_tariffs']['options'])
    else:
        await send_message(update, context, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                           MENU_TREE['show_tariffs']['options'])


async def handle_enter_square_meters(update: Update, context: ContextTypes.DEFAULT_TYPE, user_input: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤."""
    try:
        square_meters = float(user_input)
        context.user_data['square_meters'] = square_meters

        selected_tariff = context.user_data.get('selected_tariff', None)

        if selected_tariff in CLEANING_PRICES:
            price_per_meter = CLEANING_PRICES[selected_tariff]
            total_cost = price_per_meter * square_meters
            context.user_data['total_cost'] = total_cost  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            await update.message.reply_text(f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: {total_cost} —Ä—É–±.")

        # –ï—Å–ª–∏ —Ç–∞—Ä–∏—Ñ "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞" –∏–ª–∏ "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è —É–±–æ—Ä–∫–∞" ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø. —É—Å–ª—É–≥–∏ –∏ –∫–Ω–æ–ø–∫–∏
        if selected_tariff in ['–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº', '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ']:
            context.user_data['state'] = 'add_extras'
            await send_message(update, context,
                               "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏, —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                               [['–ì–ª–∞–∂–∫–∞ –±–µ–ª—å—è', '–°—Ç–∏—Ä–∫–∞ –±–µ–ª—å—è'],
                                ['–ü–æ—á–∏—Å—Ç–∏—Ç—å –ª–æ—Ç–æ–∫', '–£—Ö–æ–¥ –∑–∞ —Ü–≤–µ—Ç–∞–º–∏'],
                                ['–ú—ã—Ç—å–µ –æ–∫–æ–Ω(1 —Å—Ç–≤–æ—Ä–∫–∞)üß¥'],
                                ['–°–≤—è–∑–∞—Ç—å—Å—èüìû', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô']])
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–π", "–ú—ã—Ç—å–µ –æ–∫–æ–Ω") —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

            await send_message(update, context, "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                               [['–°–≤—è–∑–∞—Ç—å—Å—èüìû', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô']])
            context.user_data['state'] = 'final_decision'

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤.")


async def handle_enter_window_panels(update: Update, context: ContextTypes.DEFAULT_TYPE, user_input: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫."""
    try:
        num_panels = int(user_input)
        context.user_data['window_panels'] = num_panels
        context.user_data['state'] = 'calculate_result'
        await send_message(update, context, MENU_TREE['calculate_result']['message'],
                           MENU_TREE['calculate_result']['options'])
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫.")


async def handle_add_extras(update: Update, context: ContextTypes.DEFAULT_TYPE, user_choice: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."""
    # –î–æ–ø —É—Å–ª—É–≥–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å
    EXTRA_SERVICES = {
        '–ì–ª–∞–∂–∫–∞ –±–µ–ª—å—è': 600,
        '–°—Ç–∏—Ä–∫–∞ –±–µ–ª—å—è': 300,
        '–ü–æ—á–∏—Å—Ç–∏—Ç—å –ª–æ—Ç–æ–∫': 300,
        '–£—Ö–æ–¥ –∑–∞ —Ü–≤–µ—Ç–∞–º–∏': 200,
        '–ú—ã—Ç—å–µ –æ–∫–æ–Ω(1 —Å—Ç–≤–æ—Ä–∫–∞)üß¥': 350
    }

    if user_choice in EXTRA_SERVICES:
        extra_cost = EXTRA_SERVICES[user_choice]
        total_cost = context.user_data.get('total_cost', 0)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É
        total_cost += extra_cost
        context.user_data['total_cost'] = total_cost  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—É–º–º—É
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {user_choice}. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} —Ä—É–±.")

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –¥–æ–ø. —É—Å–ª—É–≥–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
        await send_message(update, context, "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —É—Å–ª—É–≥–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å—á–µ—Ç:",
                           [['–ì–ª–∞–∂–∫–∞ –±–µ–ª—å—è', '–°—Ç–∏—Ä–∫–∞ –±–µ–ª—å—è'],
                            ['–ü–æ—á–∏—Å—Ç–∏—Ç—å –ª–æ—Ç–æ–∫', '–£—Ö–æ–¥ –∑–∞ —Ü–≤–µ—Ç–∞–º–∏'],
                            ['–ú—ã—Ç—å–µ –æ–∫–æ–Ω(1 —Å—Ç–≤–æ—Ä–∫–∞)üß¥'],
                            ['–°–≤—è–∑–∞—Ç—å—Å—èüìû', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô']])

    elif user_choice == '–°–≤—è–∑–∞—Ç—å—Å—èüìû' or user_choice == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô':
        total_cost = context.user_data.get('total_cost', 0)
        await update.message.reply_text(f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏ —Å –¥–æ–ø. —É—Å–ª—É–≥–∞–º–∏: {total_cost} —Ä—É–±.")
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –≤—ã–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        if user_choice == '–°–≤—è–∑–∞—Ç—å—Å—èüìû':
            await send_message(update, context, MENU_TREE['contact']['message'], MENU_TREE['contact']['options'])
            context.user_data['state'] = 'contact'
        elif user_choice == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô':
            context.user_data['state'] = 'main_menu'
            await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])

    else:
        await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–∞—Å—á–µ—Ç.",
                           [['–ì–ª–∞–∂–∫–∞ –±–µ–ª—å—è', '–°—Ç–∏—Ä–∫–∞ –±–µ–ª—å—è'],
                            ['–ü–æ—á–∏—Å—Ç–∏—Ç—å –ª–æ—Ç–æ–∫', '–£—Ö–æ–¥ –∑–∞ —Ü–≤–µ—Ç–∞–º–∏'],
                            ['–ú—ã—Ç—å–µ –æ–∫–æ–Ω(1 —Å—Ç–≤–æ—Ä–∫–∞)üß¥'],
                            ['–°–≤—è–∑–∞—Ç—å—Å—èüìû', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô']])


async def handle_unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await send_message(update, context, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é –°–í–Ø–ó–ê–¢–¨–°–Ø")


async def handle_reviews_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô'."""
    # –°–æ–∑–¥–∞–µ–º Reply-–∫–Ω–æ–ø–∫–∏
    keyboard = [['–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã'], ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Reply-–∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)
    context.user_data['state'] = 'reviews_menu'


async def handle_write_review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞."""
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤.")
    context.user_data['state'] = 'writing_review'  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞


async def handle_view_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤."""
    channel_url = "https://t.me/CleaningSphere"  # –†–µ–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏
    await update.message.reply_text(f"–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: {channel_url}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤
    reply_keyboard = [['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô']]
    reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

    context.user_data['state'] = 'main_menu'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
async def handle_write_review_content(update: Update, context: ContextTypes.DEFAULT_TYPE, user_message: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç."""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    await context.bot.send_message(chat_id=ADMIN_ID,
                                   text=f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {update.message.from_user.first_name}: {user_message}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ—Ç–∑—ã–≤ –±—ã–ª –ø–æ–ª—É—á–µ–Ω
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    context.user_data['state'] = 'main_menu'
    await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])


async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE, user_choice: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    if user_choice == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô':
        context.user_data['state'] = 'main_menu'
        await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])
    else:
        await send_message(update, context, "–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –≤—ã –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã.",
                           MENU_TREE['contact']['options'])


async def handle_useful_info(update: Update, context: ContextTypes.DEFAULT_TYPE, user_choice: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∫–∞–Ω–∞–ª."""

    if user_choice == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô':
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        context.user_data['state'] = 'main_menu'
        await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –ø–æ—Å–µ—Ç–∏—Ç—å –∫–∞–Ω–∞–ª –∏ —Å—Å—ã–ª–∫–æ–π
        await send_message(update, context,
                           f"–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, –∞–∫—Ü–∏–π –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!\n\n{CHANNEL_LINK}",
                           MENU_TREE['useful_info']['options'])


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä"
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state = context.user_data.get('state', 'main_menu')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if query.data == "show_phone_number":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await query.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +79956124581")
        return

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if user_state == 'moderation_menu':
        # –ò—â–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ message_id –≤ callback_data
        action, message_id = query.data.split('_')
        pending_reviews = context.application.bot_data.get('reviews', [])
        review = next((r for r in pending_reviews if str(r['message_id']) == message_id), None)

        if review:
            if action == 'delete':
                # –û—Ç–º–µ—á–∞–µ–º –æ—Ç–∑—ã–≤ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π
                review['deleted'] = True
                await query.edit_message_text(text="–û—Ç–∑—ã–≤ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω.")
                context.application.bot_data['reviews'].remove(review)

            elif action == 'publish':
                # –û—Ç–º–µ—á–∞–µ–º –æ—Ç–∑—ã–≤ –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
                review['approved'] = True
                await publish_review(context, review)
                await query.edit_message_text(text="–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
                for r in context.application.bot_data['reviews']:
                    if r['user_id'] == review['user_id'] and r['message_id'] == review['message_id']:
                        r['approved'] = True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        remaining_reviews = [r for r in pending_reviews if not r.get('approved', False) and not r.get('deleted', False)]
        if not remaining_reviews:
            await context.bot.send_message(chat_id=query.message.chat_id, text="–í—Å–µ –æ—Ç–∑—ã–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
            context.user_data.pop('pending_reviews', None)
            context.user_data['state'] = 'admin_menu'
            return

        context.user_data['state'] = 'moderation_menu'

async def publish_review(context: ContextTypes.DEFAULT_TYPE, review: dict) -> None:
    try:
        if review.get('photo_file_ids'):
            if len(review['photo_file_ids']) > 1:
                media_group = [InputMediaPhoto(photo_id) for photo_id in review['photo_file_ids']]
                await context.bot.send_media_group(chat_id=CHANNEL_ID, media=media_group)
            else:
                await context.bot.send_photo(chat_id=CHANNEL_ID, photo=review['photo_file_ids'][0])

        await context.bot.forward_message(
            chat_id=CHANNEL_ID,
            from_chat_id=review['user_id'],
            message_id=review['message_id']
        )

        review['approved'] = True
        logger.info(f"–û—Ç–∑—ã–≤ –æ—Ç {review['user_name']} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await context.bot.send_message(chat_id=ADMIN_ID,
                                       text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤ –æ—Ç {review['user_name']}. –û—à–∏–±–∫–∞: {e}")


