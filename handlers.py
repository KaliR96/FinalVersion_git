# handlers.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes
from config import ADMIN_ID, CHANNEL_ID, logger, CLEANING_PRICES
from menu import MENU_TREE
from data import CLEANING_DETAILS
from utils import send_message, send_inline_message, get_image_path, get_description
from calculator import calculate, calculate_windows

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_state = context.user_data.get('state', 'main_menu')
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_state}")
    user_choice = update.message.text.strip() if update.message.text else None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if user_choice == '/start':
        await start(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüì¢"
    if user_choice == '–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüì¢':
        context.user_data['state'] = 'useful_info'
        await show_useful_info(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    menu = MENU_TREE.get(user_state)
    if not menu:
        context.user_data['state'] = 'main_menu'
        menu = MENU_TREE['main_menu']
        await send_message(update, context, menu['message'], menu['options'])
        return

    if user_choice == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô':
        context.user_data['state'] = 'main_menu'
        menu = MENU_TREE['main_menu']
        await send_message(update, context, menu['message'], menu['options'])
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –≤ –º–µ–Ω—é "–¢–∞—Ä–∏—Ñ—ãüè∑Ô∏è"
    if user_state == 'show_tariffs' and user_choice in CLEANING_PRICES:
        details = CLEANING_DETAILS.get(user_choice)
        if details:
            image_path = get_image_path(user_choice)
            try:
                with open(image_path, 'rb') as image_file:
                    await update.message.reply_photo(photo=image_file)
            except FileNotFoundError:
                logger.error(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
                await update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

            context.user_data['selected_tariff'] = user_choice
            context.user_data['state'] = f'detail_{user_choice}'

            for part in details['details_text']:
                await update.message.reply_text(part)

            await send_message(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                               MENU_TREE[f'detail_{user_choice}']['options'])
        else:
            await send_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.",
                               MENU_TREE['show_tariffs']['options'])
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –≤ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µüßÆ
    if user_state == 'calculator_menu' and user_choice in CLEANING_PRICES:
        context.user_data['selected_tariff'] = user_choice
        if user_choice == '–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥':
            context.user_data['state'] = 'enter_window_panels'
            await send_message(update, context, MENU_TREE['enter_window_panels']['message'],
                               MENU_TREE['enter_window_panels']['options'])
        else:
            context.user_data['price_per_sqm'] = CLEANING_PRICES[user_choice]
            context.user_data['state'] = 'enter_square_meters'
            await send_message(update, context, MENU_TREE['enter_square_meters']['message'],
                               MENU_TREE['enter_square_meters']['options'])
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤
    if user_state == 'enter_square_meters':
        try:
            sqm = float(user_choice)
            logger.info(f"–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤: {sqm}")

            price_per_sqm = context.user_data.get('price_per_sqm')
            if price_per_sqm is None:
                await send_message(update, context,
                                   '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.',
                                   ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô'])
                context.user_data['state'] = 'main_menu'
                return

            # –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            total_cost = price_per_sqm * sqm

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            if total_cost < 1500:
                total_cost = 1500
                result_message = (
                    f'–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π —É–±–æ—Ä–∫–∏: 1500.00 —Ä—É–±.\n'
                    '–≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞.'
                )
            else:
                result_message = f'–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π —É–±–æ—Ä–∫–∏: {total_cost:.2f} —Ä—É–±. –∑–∞ {sqm:.2f} –∫–≤.–º.'

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await send_message(update, context, result_message, MENU_TREE['calculate_result']['options'])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–æ—â–∞–¥—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context.user_data['square_meters'] = sqm
            context.user_data['total_cost'] = total_cost

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø—É—Å–ª—É–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è "–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº" –∏ "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ"
            selected_tariff = context.user_data.get('selected_tariff')
            if selected_tariff in ['–ì–µ–Ω.–£–±–æ—Ä–∫–∞üßº', '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—èüßπ']:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥, –∑–∞–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–æ–ø—É—Å–ª—É–≥–∞–º–∏
                extras_options = [
                    ['–ì–ª–∞–∂–∫–∞ –±–µ–ª—å—è', '–°—Ç–∏—Ä–∫–∞ –±–µ–ª—å—è'],
                    ['–ü–æ—á–∏—Å—Ç–∏—Ç—å –ª–æ—Ç–æ–∫', '–£—Ö–æ–¥ –∑–∞ —Ü–≤–µ—Ç–∞–º–∏'],
                    ['–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥(1 —Å—Ç–≤–æ—Ä–∫–∞)'],
                    ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô', '–°–≤—è–∑–∞—Ç—å—Å—èüìû']
                ]
                await send_message(update, context, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏?", extras_options)
                context.user_data['state'] = 'add_extras'
            else:
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ –±–µ–∑ –¥–æ–ø—É—Å–ª—É–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–π"), –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—á–µ—Ç
                await send_message(update, context,
                                   "–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–°–≤—è–∑–∞—Ç—å—Å—èüìû' !",
                                   MENU_TREE['calculate_result']['options'])
                context.user_data['state'] = 'main_menu'

            return

        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤: {user_choice}")
            await send_message(update, context, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤.',
                               MENU_TREE['enter_square_meters']['options'])
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
    if user_state == 'add_extras':
        if user_choice in ['–ì–ª–∞–∂–∫–∞ –±–µ–ª—å—è', '–°—Ç–∏—Ä–∫–∞ –±–µ–ª—å—è', '–ü–æ—á–∏—Å—Ç–∏—Ç—å –ª–æ—Ç–æ–∫', '–£—Ö–æ–¥ –∑–∞ —Ü–≤–µ—Ç–∞–º–∏', '–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥(1 —Å—Ç–≤–æ—Ä–∫–∞)']:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–æ–ø—É—Å–ª—É–≥—É
            if user_choice == '–ì–ª–∞–∂–∫–∞ –±–µ–ª—å—è':
                context.user_data['total_cost'] += 300
            elif user_choice == '–°—Ç–∏—Ä–∫–∞ –±–µ–ª—å—è':
                context.user_data['total_cost'] += 250
            elif user_choice == '–ü–æ—á–∏—Å—Ç–∏—Ç—å –ª–æ—Ç–æ–∫':
                context.user_data['total_cost'] += 150
            elif user_choice == '–£—Ö–æ–¥ –∑–∞ —Ü–≤–µ—Ç–∞–º–∏':
                context.user_data['total_cost'] += 200
            elif user_choice == '–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥(1 —Å—Ç–≤–æ—Ä–∫–∞)':
                context.user_data['total_cost'] += 350

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤ user_data
            context.user_data.setdefault('selected_extras', []).append(user_choice)

            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–±–æ—Ä –¥–æ–ø—É—Å–ª—É–≥
            await send_message(update, context,
                               f"–£—Å–ª—É–≥–∞ {user_choice} –¥–æ–±–∞–≤–ª–µ–Ω–∞. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {context.user_data['total_cost']} —Ä—É–±.\n–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.",
                               [['–ì–ª–∞–∂–∫–∞ –±–µ–ª—å—è', '–°—Ç–∏—Ä–∫–∞ –±–µ–ª—å—è'],
                                ['–ü–æ—á–∏—Å—Ç–∏—Ç—å –ª–æ—Ç–æ–∫', '–£—Ö–æ–¥ –∑–∞ —Ü–≤–µ—Ç–∞–º–∏'],
                                ['–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥(1 —Å—Ç–≤–æ—Ä–∫–∞)'],
                                ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô', '–°–≤—è–∑–∞—Ç—å—Å—èüìû']])

            context.user_data['state'] = 'add_extras'
            return

        elif user_choice == '–°–≤—è–∑–∞—Ç—å—Å—èüìû':
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            total_cost = context.user_data['total_cost']
            selected_extras = ", ".join(context.user_data.get('selected_extras', []))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–æ–ø—É—Å–ª—É–≥–∞–º–∏
            final_message = f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: {total_cost:.2f} —Ä—É–±."
            if selected_extras:
                final_message += f"\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: {selected_extras}"

            await send_message(update, context, final_message, MENU_TREE['calculate_result']['options'])

            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–°–≤—è–∑–∞—Ç—å—Å—è"
            context.user_data['state'] = 'contact'
            buttons = [
                [InlineKeyboardButton("WhatsApp", url="https://wa.me/79956124581")],
                [InlineKeyboardButton("Telegram", url="https://t.me/kaliroom")],
                [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="show_phone_number")]
            ]
            await send_inline_message(update, context, MENU_TREE['contact']['message'], buttons)

        elif user_choice == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô':
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            total_cost = context.user_data['total_cost']
            selected_extras = ", ".join(context.user_data.get('selected_extras', []))

            final_message = f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: {total_cost:.2f} —Ä—É–±."
            if selected_extras:
                final_message += f"\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: {selected_extras}"

            await send_message(update, context, final_message, MENU_TREE['calculate_result']['options'])

            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            context.user_data['state'] = 'main_menu'
            await send_message(update, context, MENU_TREE['main_menu']['message'], MENU_TREE['main_menu']['options'])

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
        context.user_data.pop('selected_extras', None)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ "–ú—ã—Ç—å–µ –æ–∫–æ–Ω"
    if user_state == 'enter_window_panels':
        try:
            num_panels = int(user_choice)
            price_per_panel = CLEANING_PRICES['–ú—ã—Ç—å–µ –æ–∫–æ–Ωüß¥']

            result = calculate_windows(price_per_panel, num_panels)

            await send_message(update, context, result['formatted_message'], MENU_TREE['calculate_result']['options'])
            context.user_data['state'] = 'main_menu'
        except ValueError:
            await send_message(update, context, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫.',
                               ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô'])
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é "–°–≤—è–∑–∞—Ç—å—Å—èüìû"
    if user_state == 'main_menu' and user_choice == '–°–≤—è–∑–∞—Ç—å—Å—èüìû':
        context.user_data['state'] = 'contact'

        buttons = [
            [InlineKeyboardButton("WhatsApp", url="https://wa.me/79956124581")],
            [InlineKeyboardButton("Telegram", url="https://t.me/kaliroom")],
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="show_phone_number")]
        ]
        await send_inline_message(update, context, MENU_TREE['contact']['message'], buttons)

        reply_keyboard = [['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô']]
        reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –¥–µ–π—Å—Ç–≤–∏–π
    # ...

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_state = context.user_data.get('state', 'main_menu')

    if query.data == "show_phone_number":
        await query.message.reply_text("–ù–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +79956124581")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö inline-–∫–Ω–æ–ø–æ–∫
    # ...

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id == ADMIN_ID:
        context.user_data['state'] = 'admin_menu'
        menu = MENU_TREE['admin_menu']
    else:
        context.user_data['state'] = 'main_menu'
        menu = MENU_TREE['main_menu']

    await send_message(update, context, menu['message'], menu['options'])

async def show_useful_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    channel_url = "https://t.me/your_channel_link"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É

    buttons = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_url)]]
    reply_markup = InlineKeyboardMarkup(buttons)

    await update.message.reply_text(
        "–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, –∞–∫—Ü–∏–π –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!",
        reply_markup=reply_markup
    )

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (moderate_reviews, publish_review –∏ —Ç.–¥.)
# ...

